// src/components/CaseList.tsx

import React, {
  useState,
  ChangeEvent,
  FormEvent,
  useMemo,
  useEffect,
} from 'react';

import { useAuth } from '@/contexts/AuthContext';
import {
  useCases,
  useUpdateCase,
  useDeleteCase,
} from '@/hooks/useCases';
import { Case } from '@/types';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  RadioGroup,
  RadioGroupItem,
} from '@/components/ui/radio-group';
import { Clock, Trash2, Edit2, Calendar } from 'lucide-react';
import { toast } from '@/hooks/use-toast';
import { getUsers, ApiUser } from '@/services/api';

export function CaseList() {
  // ─── 1) Authentication ──────────────────────────────────────────────────────────
  const { user } = useAuth();

  // ─── 2) Fetch all cases via React Query ────────────────────────────────────────
  const {
    data: cases = [],
    isLoading,
    error,
    refetch,
  } = useCases();

  // ─── 3) Local State for Text/Status Filters ────────────────────────────────────
  const [searchTerm, setSearchTerm] = useState<string>('');
  const [statusFilter, setStatusFilter] = useState<string>('all');

  // ─── 4) Admin‐Only: Start/End Date Range Filter ───────────────────────────────
  const [startDate, setStartDate] = useState<string>('');
  const [endDate, setEndDate] = useState<string>('');

  // ─── 5) Fetch “dropbox” users (for admin‐only reassignment) ────────────────────
  const [dropboxUsers, setDropboxUsers] = useState<ApiUser[]>([]);
  useEffect(() => {
    if (user?.role !== 'admin') return;

    (async () => {
      try {
        const allUsers = await getUsers(user);
        setDropboxUsers(allUsers);
      } catch (err) {
        console.error('Failed to fetch users:', err);
      }
    })();
  }, [user]);

  // ─── 6) Mutation Hooks ─────────────────────────────────────────────────────────
  const updateCaseMutation = useUpdateCase();
  const deleteCaseMutation = useDeleteCase();

  // ─── 7) Editing State ──────────────────────────────────────────────────────────
  const [editingCaseId, setEditingCaseId] = useState<number | null>(null);
  const [editIpAddress, setEditIpAddress] = useState<string>('');
  const [editConnectivity, setEditConnectivity] =
    useState<'Stable' | 'Unstable' | 'Unknown'>('Unknown');
  const [editDueDate, setEditDueDate] = useState<string>('');
  const [editDueTime, setEditDueTime] = useState<string>('23:59');
  const [editTimeSpent, setEditTimeSpent] = useState<number>(0);
  const [editRemarks, setEditRemarks] = useState<string>('');
  const [editStatus, setEditStatus] = useState<Case['status']>('Pending');
  const [editDevice, setEditDevice] = useState<string>('');
  // We store either a number (user ID) or '' to mean “unassigned.”
  const [editAssignedToId, setEditAssignedToId] = useState<number | ''>('');
  // Hold the corresponding username so the SelectValue can show it immediately
  const [editAssignedToUsername, setEditAssignedToUsername] = useState<string>('');

  // ─── 8) Which cases to show “before” applying any filters ─────────────────────
  const baseCases = useMemo(() => {
    if (!user) return [];
    return cases;
  }, [cases, user]);

  // ─── 9) Text + Status Filter (now also searches assigned‐to) ───────────────────
  const textFiltered = useMemo(() => {
    const lowerTerm = searchTerm.toLowerCase().trim();
    return baseCases.filter((c) => {
      // Search by leadCkt, companyName, createdByUser, or assignedToUser
      const assignedLabel = c.assignedToUser ?? ''; // no “Unassigned” text
      const matchesLead =
        c.leadCkt.toLowerCase().includes(lowerTerm) ||
        c.companyName?.toLowerCase().includes(lowerTerm) ||
        c.createdByUser.toLowerCase().includes(lowerTerm) ||
        assignedLabel.toLowerCase().includes(lowerTerm);

      const matchesStatus =
        statusFilter === 'all' || c.status === statusFilter;
      return matchesLead && matchesStatus;
    });
  }, [baseCases, searchTerm, statusFilter]);

  // ─── 10) Date Range Filter (Admin Only) ────────────────────────────────────────
  const dateFiltered = useMemo(() => {
    if (user?.role !== 'admin' || !startDate || !endDate) {
      return textFiltered;
    }
    const start = new Date(`${startDate}T00:00:00`);
    const end = new Date(`${endDate}T23:59:59`);
    return textFiltered.filter((c) => {
      const created = new Date(c.createdAt);
      return created >= start && created <= end;
    });
  }, [textFiltered, user, startDate, endDate]);

  // ─── 11) “Cases Per Creator” Summary (Admin Only) ─────────────────────────────
  const casesPerCreator = useMemo(() => {
    if (user?.role !== 'admin' || !startDate || !endDate) {
      return {};
    }
    return dateFiltered.reduce<Record<string, number>>((acc, c) => {
      const creator = c.createdByUser || 'Unknown';
      acc[creator] = (acc[creator] || 0) + 1;
      return acc;
    }, {});
  }, [dateFiltered, user, startDate, endDate]);

  // ─── 12) “Summary by Period for an Assignee” ──────────────────────────────────
  // If the searchTerm exactly matches one of the dropboxUsers’ usernames (case‐insensitive),
  // then gather that user’s cases (by assignedToUser) and group them by day/week/month/year.
  const summaryForAssignee = useMemo(() => {
    const term = searchTerm.trim().toLowerCase();
    if (!term) return null;

    // Find a dropboxUser whose username matches exactly (case-insensitive)
    const matchedUser = dropboxUsers.find(
      (u) => u.username.toLowerCase() === term
    );
    if (!matchedUser) return null;

    // All cases assigned to that username:
    const userCases = baseCases.filter(
      (c) => c.assignedToUser?.toLowerCase() === term
    );

    // Helper: format “YYYY-MM-DD” from a Date
    const toYYYYMMDD = (d: Date) => {
      const yy = d.getFullYear();
      const mm = String(d.getMonth() + 1).padStart(2, '0');
      const dd = String(d.getDate()).padStart(2, '0');
      return `${yy}-${mm}-${dd}`;
    };

    // Helper: compute ISO week key (e.g. “2025-W23”)
    const getWeekKey = (d: Date) => {
      const date = new Date(d.getTime());
      // Set to nearest Thursday: current date + 3 − ((day+6)%7)
      date.setDate(date.getDate() + 3 - ((date.getDay() + 6) % 7));
      const firstThursday = new Date(date.getFullYear(), 0, 4);
      firstThursday.setDate(
        firstThursday.getDate() +
          3 -
          ((firstThursday.getDay() + 6) % 7)
      );
      const weekNumber = 1 +
        Math.round(
          ((date.getTime() - firstThursday.getTime()) /
            86400000 -
            3 +
            ((firstThursday.getDay() + 6) % 7)) /
            7
        );
      return `${date.getFullYear()}-W${String(weekNumber).padStart(2, '0')}`;
    };

    // Group by day, week, month, year
    const byDay: Record<string, number> = {};
    const byWeek: Record<string, number> = {};
    const byMonth: Record<string, number> = {};
    const byYear: Record<string, number> = {};

    userCases.forEach((c) => {
      const dt = new Date(c.createdAt);
      const dayKey = toYYYYMMDD(dt);
      byDay[dayKey] = (byDay[dayKey] || 0) + 1;

      const weekKey = getWeekKey(dt);
      byWeek[weekKey] = (byWeek[weekKey] || 0) + 1;

      const monthKey = `${dt.getFullYear()}-${String(dt.getMonth() + 1).padStart(2, '0')}`;
      byMonth[monthKey] = (byMonth[monthKey] || 0) + 1;

      const yearKey = `${dt.getFullYear()}`;
      byYear[yearKey] = (byYear[yearKey] || 0) + 1;
    });

    return {
      username: matchedUser.username,
      byDay,
      byWeek,
      byMonth,
      byYear,
    };
  }, [searchTerm, baseCases, dropboxUsers]);

  // ─── 13) Start Editing ─────────────────────────────────────────────────────────
  const startEditing = (caseItem: Case) => {
    const idNum =
      typeof caseItem.id === 'string'
        ? parseInt(caseItem.id, 10)
        : caseItem.id;
    setEditingCaseId(idNum);
    setEditIpAddress(caseItem.ipAddress || '');
    setEditConnectivity(caseItem.connectivity);

    // Parse the existing dueDate (ISO or “YYYY-MM-DD HH:mm:ss”)
    const due = new Date(caseItem.dueDate);
    setEditDueDate(due.toISOString().slice(0, 10));
    setEditDueTime(due.toTimeString().slice(0, 5));

    setEditTimeSpent(caseItem.timeSpent || 0);
    setEditRemarks(caseItem.caseRemarks || '');
    setEditStatus(caseItem.status);
    setEditDevice(caseItem.device || '');

    // Initialize assigned‐to ID & username
    if (caseItem.assignedTo !== null && caseItem.assignedTo !== undefined) {
      setEditAssignedToId(caseItem.assignedTo);
      setEditAssignedToUsername(caseItem.assignedToUser || '');
    } else {
      setEditAssignedToId('');
      setEditAssignedToUsername('');
    }
  };

  // ─── 14) Cancel Editing ────────────────────────────────────────────────────────
  const cancelEditing = () => {
    setEditingCaseId(null);
    setEditIpAddress('');
    setEditConnectivity('Unknown');
    setEditDueDate('');
    setEditDueTime('23:59');
    setEditTimeSpent(0);
    setEditRemarks('');
    setEditStatus('Pending');
    setEditDevice('');
    setEditAssignedToId('');
    setEditAssignedToUsername('');
  };

  // ─── 15) Save Edited Case ─────────────────────────────────────────────────────
  const handleSaveEdit = (e: FormEvent) => {
    e.preventDefault();
    if (editingCaseId === null) return;

    // Find the original case so we can compare assignedTo
    const origCase = baseCases.find(
      (c) =>
        (typeof c.id === 'string'
          ? parseInt(c.id, 10)
          : c.id) === editingCaseId
    );
    if (!origCase) {
      toast({
        title: 'Error',
        description: `Original case #${editingCaseId} not found.`,
        variant: 'destructive',
      });
      cancelEditing();
      return;
    }

    // Combine the edited due date & time into local ISO (we want "YYYY-MM-DD HH:mm:ss" on the API)
    const combinedDue = new Date(`${editDueDate}T${editDueTime}`);
    const isoDue = combinedDue.toISOString();

    // Build update payload
    const updates: Partial<Case> & {
      assignedTo?: number | null;
      assignedDate?: string;
      dueDate?: string;
    } = {
      ipAddress: editIpAddress,
      connectivity: editConnectivity,
      dueDate: isoDue,
      timeSpent: editTimeSpent,
      caseRemarks: editRemarks,
      status: editStatus,
      device: editDevice,
      assignedTo: editAssignedToId === '' ? null : Number(editAssignedToId),
    };

    // If the admin changed the assignedTo value, we automatically bump assignedDate to “now”
    const newAssignedTo =
      editAssignedToId === '' ? null : Number(editAssignedToId);
    const oldAssignedTo =
      origCase.assignedTo === null || origCase.assignedTo === undefined
        ? null
        : origCase.assignedTo;

    if (newAssignedTo !== oldAssignedTo) {
      // Build a local "YYYY-MM-DD HH:mm:00" for the current moment
      const now = new Date();
      const yyyy = now.getFullYear();
      const mm = String(now.getMonth() + 1).padStart(2, '0');
      const dd = String(now.getDate()).padStart(2, '0');
      const hh = String(now.getHours()).padStart(2, '0');
      const min = String(now.getMinutes()).padStart(2, '0');
      updates.assignedDate = `${yyyy}-${mm}-${dd} ${hh}:${min}:00`;
    }

    updateCaseMutation.mutate(
      { id: editingCaseId, updates },
      {
        onSuccess: () => {
          toast({
            title: 'Success',
            description: 'Case updated successfully',
          });
          cancelEditing();
          refetch(); // Re‐fetch so assignedToUser & assignedDate come back fresh
        },
        onError: (err) => {
          console.error('Error updating case:', err);
          const errorMessage =
            (err as any)?.response?.data?.error ||
            'Failed to update case. Please try again.';
          toast({
            title: 'Error',
            description: errorMessage,
            variant: 'destructive',
          });
        },
      }
    );
  };

  // ─── 16) Delete Case (Admin Only) ──────────────────────────────────────────────
  const handleDeleteCase = (caseId: number) => {
    if (!user || user.role !== 'admin') {
      toast({
        title: 'Unauthorized',
        description: 'Only admins can delete cases.',
        variant: 'destructive',
      });
      return;
    }
    if (!window.confirm(`Delete case #${caseId}?`)) return;

    deleteCaseMutation.mutate(caseId, {
      onSuccess: () => {
        toast({
          title: 'Deleted',
          description: `Case #${caseId} deleted.`,
        });
        refetch();
      },
      onError: (err) => {
        console.error('Error deleting case:', err);
        toast({
          title: 'Error',
          description: 'Failed to delete case.',
          variant: 'destructive',
        });
      },
    });
  };

  // ─── 17) Initial Refetch on Mount ───────────────────────────────────────────────
  useEffect(() => {
    refetch();
  }, [refetch]);

  if (isLoading) return <div>Loading cases…</div>;
  if (error)
    return <div>Error loading cases: {(error as Error).message}</div>;

  // ─── Helpers for styling & formatting ───────────────────────────────────────────
  const getStatusColor = (status: Case['status']) => {
    switch (status) {
      case 'Pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'Overdue':
        return 'bg-red-100 text-red-800';
      case 'Completed':
        return 'bg-green-100 text-green-800';
      case 'OnHold':
        return 'bg-gray-100 text-gray-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getConnectivityColor = (connectivity: string) => {
    switch (connectivity) {
      case 'Stable':
        return 'bg-green-100 text-green-800';
      case 'Unstable':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  // Format a string/Date to “MMM dd, yyyy, HH:mm” in local time
  const formatDateTime = (d: string | Date) =>
    new Intl.DateTimeFormat('en-US', {
      year: 'numeric',
      month: 'short',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
    }).format(new Date(d));

  const formatTimeSpent = (minutes: number) => {
    if (minutes < 60) return `${minutes}m`;
    const hrs = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hrs}h ${mins}m`;
  };

  return (
    <div className="space-y-6 p-4">
      {/* ─── Filters ─────────────────────────────────────────────────────────────── */}
      <Card className="bg-white/80 backdrop-blur-lg border border-gray-200 shadow-sm">
        <CardHeader>
          <CardTitle>Case Management</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col sm:flex-row gap-4 mb-4">
            <Input
              placeholder="Search by lead, company, creator, or assigned-to..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="flex-1 text-sm"
            />
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-full sm:w-48 text-sm">
                <SelectValue placeholder="Filter by status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="Pending">Pending</SelectItem>
                <SelectItem value="Overdue">Overdue</SelectItem>
                <SelectItem value="Completed">Completed</SelectItem>
                <SelectItem value="OnHold">On Hold</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* ─── Admin‐Only: Date Range Pickers ───────────────────────────────────────── */}
          {user?.role === 'admin' && (
            <div className="flex flex-wrap gap-6 mb-6">
              <div className="space-y-2">
                <p className="text-sm text-gray-600 flex items-center gap-1">
                  <Calendar className="h-4 w-4" /> Start Date
                </p>
                <Input
                  type="date"
                  value={startDate}
                  onChange={(e: ChangeEvent<HTMLInputElement>) =>
                    setStartDate(e.target.value)
                  }
                  className="text-sm w-44"
                />
              </div>
              <div className="space-y-2">
                <p className="text-sm text-gray-600 flex items-center gap-1">
                  <Calendar className="h-4 w-4" /> End Date
                </p>
                <Input
                  type="date"
                  value={endDate}
                  onChange={(e: ChangeEvent<HTMLInputElement>) =>
                    setEndDate(e.target.value)
                  }
                  className="text-sm w-44"
                  min={startDate || undefined}
                />
              </div>
            </div>
          )}

          {/* ─── Admin‐Only: Cases Per Creator Summary ───────────────────────────────── */}
          {user?.role === 'admin' && startDate && endDate && (
            <div className="bg-gray-50 p-4 rounded-lg mb-6">
              <h3 className="text-sm text-gray-700 mb-2">
                Cases Created Between {startDate} and {endDate}:
              </h3>
              {Object.keys(casesPerCreator).length === 0 ? (
                <p className="text-sm text-gray-500">
                  No cases found in that range.
                </p>
              ) : (
                <ul className="list-disc list-inside text-sm text-gray-800">
                  {Object.entries(casesPerCreator).map(
                    ([username, count]) => (
                      <li key={username}>
                        <span className="font-semibold">{username}</span>: {count}
                      </li>
                    )
                  )}
                </ul>
              )}
            </div>
          )}

          {/* ─── “Summary by Period for an Assignee” (when searchTerm matches a username) ───────────────────────────────────── */}
          {summaryForAssignee && (
            <Card className="bg-indigo-50 border-indigo-200 mb-6">
              <CardHeader>
                <CardTitle className="text-lg">
                  Case Summary for “{summaryForAssignee.username}”
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {/* By Day */}
                  <div>
                    <h4 className="font-medium text-sm text-gray-700 mb-1">
                      📅 By Day
                    </h4>
                    {Object.entries(summaryForAssignee.byDay).length === 0 ? (
                      <p className="text-xs text-gray-500">
                        No cases.
                      </p>
                    ) : (
                      <ul className="text-xs text-gray-800 list-disc list-inside">
                        {Object.entries(summaryForAssignee.byDay).map(
                          ([day, count]) => (
                            <li key={day}>
                              <span className="font-semibold">{day}</span>: {count}
                            </li>
                          )
                        )}
                      </ul>
                    )}
                  </div>
                  {/* By Week */}
                  <div>
                    <h4 className="font-medium text-sm text-gray-700 mb-1">
                      🗓️ By Week
                    </h4>
                    {Object.entries(summaryForAssignee.byWeek).length === 0 ? (
                      <p className="text-xs text-gray-500">
                        No cases.
                      </p>
                    ) : (
                      <ul className="text-xs text-gray-800 list-disc list-inside">
                        {Object.entries(summaryForAssignee.byWeek).map(
                          ([week, count]) => (
                            <li key={week}>
                              <span className="font-semibold">{week}</span>: {count}
                            </li>
                          )
                        )}
                      </ul>
                    )}
                  </div>
                  {/* By Month */}
                  <div>
                    <h4 className="font-medium text-sm text-gray-700 mb-1">
                      📆 By Month
                    </h4>
                    {Object.entries(summaryForAssignee.byMonth).length === 0 ? (
                      <p className="text-xs text-gray-500">
                        No cases.
                      </p>
                    ) : (
                      <ul className="text-xs text-gray-800 list-disc list-inside">
                        {Object.entries(summaryForAssignee.byMonth).map(
                          ([month, count]) => (
                            <li key={month}>
                              <span className="font-semibold">{month}</span>: {count}
                            </li>
                          )
                        )}
                      </ul>
                    )}
                  </div>
                  {/* By Year */}
                  <div>
                    <h4 className="font-medium text-sm text-gray-700 mb-1">
                      🗓️ By Year
                    </h4>
                    {Object.entries(summaryForAssignee.byYear).length === 0 ? (
                      <p className="text-xs text-gray-500">
                        No cases.
                      </p>
                    ) : (
                      <ul className="text-xs text-gray-800 list-disc list-inside">
                        {Object.entries(summaryForAssignee.byYear).map(
                          ([year, count]) => (
                            <li key={year}>
                              <span className="font-semibold">{year}</span>: {count}
                            </li>
                          )
                        )}
                      </ul>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </CardContent>
      </Card>

      {/* ─── Display Filtered Cases ────────────────────────────────────────────────── */}
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {dateFiltered.map((caseItem, idx) => {
          const idNum =
            typeof caseItem.id === 'string'
              ? parseInt(caseItem.id, 10)
              : caseItem.id;
          const isEditing = editingCaseId === idNum;

          return (
            <Card
              key={caseItem.id}
              className="relative z-0 bg-white/80 backdrop-blur-lg border border-gray-200 shadow-sm hover:shadow-md transition-transform duration-200 hover:scale-105 animate-fade-in"
              style={{ animationDelay: `${idx * 100}ms` }}
            >
              <CardHeader className="relative z-10 pb-3 pt-6 bg-white/70">
                <div className="absolute top-2 right-2 flex space-x-2">
                  <Button
                    variant="outline"
                    size="sm"
                    className="h-8 w-8 p-0"
                    onClick={() =>
                      isEditing ? cancelEditing() : startEditing(caseItem)
                    }
                  >
                    <Edit2 className="h-4 w-4" />
                  </Button>
                  {user?.role === 'admin' && (
                    <Button
                      variant="outline"
                      size="sm"
                      className="h-8 w-8 p-0"
                      onClick={() => handleDeleteCase(idNum)}
                    >
                      <Trash2 className="h-4 w-4 text-red-600 hover:text-red-800" />
                    </Button>
                  )}
                </div>
                <div className="flex flex-col">
                  <CardTitle className="text-lg">
                    {caseItem.leadCkt}
                  </CardTitle>
                  {caseItem.companyName && (
                    <p className="text-sm text-gray-600 break-words mt-1">
                      Company:{' '}
                      <span className="font-medium">
                        {caseItem.companyName}
                      </span>
                    </p>
                  )}
                  <p className="text-sm text-gray-600 mt-1">
                    Created by:{' '}
                    <span className="font-medium">
                      {caseItem.createdByUser}
                    </span>
                  </p>
                </div>
              </CardHeader>

              <CardContent className="space-y-3 pt-2">
                {!isEditing && (
                  <>
                    {/* IP / Connectivity */}
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div>
                        <p className="text-gray-500">IP Address:</p>
                        <p className="font-medium">
                          {caseItem.ipAddress || 'N/A'}
                        </p>
                      </div>
                      <div>
                        <p className="text-gray-500">Connectivity:</p>
                        <Badge
                          className={getConnectivityColor(
                            caseItem.connectivity
                          )}
                          variant="outline"
                        >
                          {caseItem.connectivity}
                        </Badge>
                      </div>
                    </div>

                    {/* Due Date */}
                    <div className="text-sm">
                      <p className="text-gray-500">Due Date:</p>
                      <p className="font-medium">
                        {formatDateTime(caseItem.dueDate)}
                      </p>
                    </div>
                    {/* Created */}
                    <div className="text-sm">
                      <p className="text-gray-500">Created:</p>
                      <p className="font-medium">
                        {formatDateTime(caseItem.createdAt)}
                      </p>
                    </div>

                    {/* ─── Assigned To (no “Unassigned”) ───────────────────────────── */}
                    <div className="text-sm">
                      <p className="text-gray-500">Assigned To:</p>
                      <p className="font-medium">
                        {caseItem.assignedToUser ?? ''}
                      </p>
                    </div>

                    {/* Time Spent */}
                    {caseItem.timeSpent !== undefined &&
                      caseItem.timeSpent > 0 && (
                        <div className="text-sm">
                          <div className="flex items-center gap-1 text-gray-500">
                            <Clock className="h-3 w-3" /> <span>Time Spent:</span>
                          </div>
                          <p className="font-medium">
                            {formatTimeSpent(caseItem.timeSpent)}
                          </p>
                        </div>
                      )}

                    {/* Remarks */}
                    {caseItem.caseRemarks && (
                      <div className="text-sm">
                        <p className="text-gray-500">Remarks:</p>
                        <p className="text-gray-700 text-xs bg-gray-50 p-2 rounded whitespace-pre-wrap break-words">
                          {caseItem.caseRemarks}
                        </p>
                      </div>
                    )}

                    {/* Device */}
                    {caseItem.device && (
                      <div className="text-sm">
                        <p className="text-gray-500">Device:</p>
                        <p className="font-medium">{caseItem.device}</p>
                      </div>
                    )}

                    {/* Quick‐Status Buttons */}
                    <div className="flex flex-wrap gap-1 pt-2">
                      {['Pending', 'Overdue', 'Completed', 'OnHold'].map(
                        (statusOption) => (
                          <Button
                            key={statusOption}
                            size="sm"
                            variant={
                              caseItem.status === statusOption
                                ? 'default'
                                : 'outline'
                            }
                            onClick={() =>
                              updateCaseMutation.mutate({
                                id: idNum,
                                updates: {
                                  status: statusOption as Case['status'],
                                },
                              })
                            }
                            className="text-xs transition-all duration-200"
                            disabled={updateCaseMutation.isLoading}
                          >
                            {statusOption === 'OnHold'
                              ? 'On Hold'
                              : statusOption}
                          </Button>
                        )
                      )}
                    </div>
                  </>
                )}

                {isEditing && (
                  <form onSubmit={handleSaveEdit} className="space-y-4">
                    {/* IP Address */}
                    <div className="space-y-1">
                      <p className="text-gray-500 text-xs">IP Address</p>
                      <Input
                        value={editIpAddress}
                        onChange={(e: ChangeEvent<HTMLInputElement>) =>
                          setEditIpAddress(e.target.value)
                        }
                        placeholder="Enter IP address"
                        className="w-full text-xs"
                      />
                    </div>

                    {/* Connectivity */}
                    <div className="space-y-1">
                      <p className="text-gray-500 text-xs">Connectivity</p>
                      <RadioGroup
                        value={editConnectivity}
                        onValueChange={(v) =>
                          setEditConnectivity(
                            v as 'Stable' | 'Unstable' | 'Unknown'
                          )
                        }
                        className="flex gap-4 text-xs"
                      >
                        <div className="flex items-center space-x-2">
                          <RadioGroupItem
                            value="Stable"
                            id={`stable-${idNum}`}
                          />
                          <label htmlFor={`stable-${idNum}`}>Stable</label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <RadioGroupItem
                            value="Unstable"
                            id={`unstable-${idNum}`}
                          />
                          <label htmlFor={`unstable-${idNum}`}>Unstable</label>
                        </div>
                        <div className="flex items-center space-x-2">
                          <RadioGroupItem
                            value="Unknown"
                            id={`unknown-${idNum}`}
                          />
                          <label htmlFor={`unknown-${idNum}`}>Unknown</label>
                        </div>
                      </RadioGroup>
                    </div>

                    {/* Due Date & Time */}
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-1">
                        <p className="text-gray-500 text-xs">Due Date</p>
                        <Input
                          type="date"
                          value={editDueDate}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setEditDueDate(e.target.value)
                          }
                          className="w-full text-xs"
                          required
                        />
                      </div>
                      <div className="space-y-1">
                        <p className="text-gray-500 text-xs">Due Time</p>
                        <Input
                          type="time"
                          value={editDueTime}
                          onChange={(e: ChangeEvent<HTMLInputElement>) =>
                            setEditDueTime(e.target.value)
                          }
                          className="w-full text-xs"
                        />
                      </div>
                    </div>

                    {/* Time Spent */}
                    <div className="space-y-1">
                      <p className="text-gray-500 text-xs">
                        Time Spent (minutes)
                      </p>
                      <Input
                        type="number"
                        min="0"
                        value={editTimeSpent}
                        onChange={(e: ChangeEvent<HTMLInputElement>) =>
                          setEditTimeSpent(Number(e.target.value))
                        }
                        className="w-full text-xs"
                      />
                    </div>

                    {/* Device */}
                    <div className="space-y-1">
                      <p className="text-gray-500 text-xs">Device</p>
                      <Input
                        value={editDevice}
                        onChange={(e: ChangeEvent<HTMLInputElement>) =>
                          setEditDevice(e.target.value)
                        }
                        placeholder="Enter device"
                        className="w-full text-xs"
                      />
                    </div>

                    {/* “Assign To” dropdown (admin only) */}
                    {user?.role === 'admin' && (
                      <div className="space-y-1">
                        <p className="text-gray-500 text-xs">Assign To</p>
                        <Select
                          value={
                            editAssignedToId === ''
                              ? ''
                              : editAssignedToId.toString()
                          }
                          onValueChange={(value) => {
                            if (value === 'unassign') {
                              setEditAssignedToId('');
                              setEditAssignedToUsername('');
                            } else {
                              const numericId = Number(value);
                              setEditAssignedToId(numericId);
                              const found = dropboxUsers.find(
                                (u) => u.id === numericId
                              );
                              setEditAssignedToUsername(
                                found ? found.username : ''
                              );
                            }
                          }}
                        >
                          <SelectTrigger className="w-full text-xs">
                            <SelectValue>
                              {editAssignedToUsername || ''}
                            </SelectValue>
                          </SelectTrigger>
                          <SelectContent>
                            {/* “Unassign” must use a non‐empty value */}
                            <SelectItem value="unassign">
                              — Unassign —
                            </SelectItem>

                            {/* If there is an assigned ID not in dropboxUsers yet, add it */}
                            {editAssignedToId !== '' &&
                              !dropboxUsers.some(
                                (u) => u.id === Number(editAssignedToId)
                              ) && (
                                <SelectItem
                                  key={`temp-${editAssignedToId}`}
                                  value={editAssignedToId.toString()}
                                >
                                  {editAssignedToUsername}
                                </SelectItem>
                              )}

                            {dropboxUsers.map((u) => (
                              <SelectItem key={u.id} value={u.id.toString()}>
                                {u.username}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    )}

                    {/* Remarks */}
                    <div className="space-y-1">
                      <p className="text-gray-500 text-xs">Remarks</p>
                      <Input
                        value={editRemarks}
                        onChange={(e: ChangeEvent<HTMLInputElement>) =>
                          setEditRemarks(e.target.value)
                        }
                        placeholder="Enter remarks"
                        className="w-full text-xs"
                      />
                    </div>

                    {/* Status */}
                    <div className="space-y-1">
                      <p className="text-gray-500 text-xs">Status</p>
                      <Select
                        value={editStatus}
                        onValueChange={(v) =>
                          setEditStatus(v as Case['status'])
                        }
                      >
                        <SelectTrigger className="w-full text-xs">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Pending">Pending</SelectItem>
                          <SelectItem value="Overdue">Overdue</SelectItem>
                          <SelectItem value="Completed">Completed</SelectItem>
                          <SelectItem value="OnHold">On Hold</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="flex gap-2 mt-2">
                      <Button
                        type="submit"
                        disabled={updateCaseMutation.isLoading}
                        size="sm"
                      >
                        Save
                      </Button>
                      <Button
                        variant="outline"
                        onClick={cancelEditing}
                        size="sm"
                      >
                        Cancel
                      </Button>
                    </div>
                  </form>
                )}
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* ─── No Cases Fallback ──────────────────────────────────────────────────────── */}
      {dateFiltered.length === 0 && (
        <Card className="bg-white/80 backdrop-blur-lg border border-gray-200 shadow-sm">
          <CardContent className="text-center py-12">
            <div className="w-16 h-16 bg-gray-100 rounded-full mx-auto mb-4 flex items-center justify-center">
              <svg
                className="w-8 h-8 text-gray-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 .293l5.414 5.414a1 1 0l.707.707V19a2 2 0 0"
                />
              </svg>
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              No cases found
            </h3>
            <p className="text-gray-600">
              {searchTerm ||
              statusFilter !== 'all' ||
              (user?.role === 'admin' && (startDate || endDate))
                ? 'No cases match your current filters.'
                : 'Create a new case to get started with case management.'}
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
}

