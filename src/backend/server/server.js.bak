// src/backend/server/server.js

/**
 * A complete Express + MySQL server with two‐level role logic:
 *  • Admins see all cases (and can assign/unassign anybody).
 *  • Regular “user” accounts only see cases WHERE assignedTo = their own user ID.
 *
 * On startup, this script ensures that:
 *  - LeadDemoData
 *  - users
 *  - cases (with createdBy + assignedTo foreign keys) 
 * exist (creating them if necessary).
 *
 * Endpoints:
 *  GET    /api/health
 *  GET    /api/leads?q=<search>
 *  GET    /api/cases
 *  GET    /api/cases/:id/details
 *  POST   /api/cases
 *  PUT    /api/cases/:id
 *  DELETE /api/cases/:id
 *  POST   /api/auth/login
 *  GET    /api/users
 *  POST   /api/users
 *  PUT    /api/users/:id
 *  DELETE /api/users/:id
 *
 * To use GET/POST/PUT/DELETE /api/cases, the frontend must include headers:
 *    x-user-id:   <integer user ID>
 *    x-user-role: <"admin" or "user">
 */

const express = require('express');
const mysql = require('mysql2/promise');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.json());

// ─── 1) MySQL Connection Pool ───────────────────────────────────────────────────
const pool = mysql.createPool({
  host:     process.env.DB_HOST     || '103.127.117.182',
  port:     parseInt(process.env.DB_PORT, 10) || 3306,
  user:     process.env.DB_USER     || 'root',
  password: process.env.DB_PASSWORD || 'JeebrMum@102',
  database: process.env.DB_NAME     || 'Tracker',
  waitForConnections: true,
  connectionLimit:    10,
  queueLimit:         0
});

// ─── 2) ON STARTUP: VERIFY CONNECTION & CREATE TABLES ────────────────────────────
;(async () => {
  try {
    const connection = await pool.getConnection();
    console.log('✓ Connected to MySQL database successfully');
    connection.release();

    // Create all tables if they do not exist
    await createAllTables();
  } catch (err) {
    console.error('Database connection failed:', err);
    console.error('Troubleshooting:');
    console.error('1. Verify MySQL service is running');
    console.error('2. Check network connectivity to MySQL host');
    console.error('3. Confirm database credentials');
    process.exit(1);
  }
})();


/**
 * Creates (if not exists) the three tables we need:
 *  - LeadDemoData
 *  - users           (must exist before cases due to foreign key)
 *  - cases           (with createdBy, assignedTo, and device columns)
 */
async function createAllTables() {
  // a) LeadDemoData table
  const createLeadTable = `
    CREATE TABLE IF NOT EXISTS LeadDemoData (
      sr_no VARCHAR(50),
      ckt VARCHAR(255) NOT NULL,
      cust_name VARCHAR(500),
      address TEXT,
      email_id VARCHAR(255),
      reserved_field VARCHAR(50),
      contact_name VARCHAR(255),
      comm_date VARCHAR(50),
      pop_name VARCHAR(255),
      nas_ip_1 VARCHAR(45),
      switch_ip_1 VARCHAR(45),
      port_no_1 VARCHAR(50),
      vlan_id_1 VARCHAR(50),
      primary_pop VARCHAR(500),
      pop_name_2 VARCHAR(255),
      nas_ip_2 VARCHAR(45),
      switch_ip_2 VARCHAR(45),
      port_no_2 VARCHAR(50),
      vlan_id_2 VARCHAR(50),
      backup VARCHAR(255),
      usable_ip_address VARCHAR(45),
      subnet_mask VARCHAR(45),
      gateway VARCHAR(45),
      bandwidth VARCHAR(100),
      sales_person VARCHAR(255),
      testing_fe VARCHAR(255),
      device VARCHAR(255),
      remarks TEXT,
      mrtg TEXT,
      INDEX idx_ckt (ckt),
      INDEX idx_cust_name (cust_name),
      INDEX idx_contact_name (contact_name),
      INDEX idx_sales_person (sales_person)
    );
  `;

  // b) users table (using password_hash instead of password)
  const createUsersTable = `
    CREATE TABLE IF NOT EXISTS users (
      id INT AUTO_INCREMENT PRIMARY KEY,
      username VARCHAR(50) NOT NULL UNIQUE,
      password_hash VARCHAR(255) NOT NULL,
      role ENUM('admin','user') NOT NULL DEFAULT 'user',
      createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP
    );
  `;

  // c) cases table (with createdBy + assignedTo foreign keys, plus device column)
  const createCasesTable = `
    CREATE TABLE IF NOT EXISTS cases (
      id INT AUTO_INCREMENT PRIMARY KEY,
      leadCkt VARCHAR(255) NOT NULL,
      ipAddress VARCHAR(45),
      connectivity ENUM('Stable','Unstable','Unknown') DEFAULT 'Unknown',
      assignedDate DATETIME NOT NULL,
      dueDate DATETIME NOT NULL,
      caseRemarks TEXT,
      status ENUM('Pending','Overdue','Completed','OnHold') DEFAULT 'Pending',
      createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
      lastUpdated DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
      timeSpent INT DEFAULT 0,
      device VARCHAR(255) DEFAULT NULL,
      createdBy INT NOT NULL,
      assignedTo INT NULL,
      FOREIGN KEY (createdBy)  REFERENCES users(id) ON DELETE CASCADE,
      FOREIGN KEY (assignedTo) REFERENCES users(id) ON DELETE SET NULL
    );
  `;

  try {
    // Create/Verify LeadDemoData
    await pool.query(createLeadTable);
    console.log('✓ LeadDemoData table verified/created');

    // Create/Verify users (needed before cases due to foreign key)
    await pool.query(createUsersTable);
    console.log('✓ users table verified/created');

    // Create/Verify cases
    await pool.query(createCasesTable);
    console.log('✓ cases table verified/created');

    // (Optional) Print structures to console
    const [leadColumns] = await pool.query('DESCRIBE LeadDemoData;');
    console.log('LeadDemoData structure:');
    console.table(leadColumns);

    const [userColumns] = await pool.query('DESCRIBE users;');
    console.log('users structure:');
    console.table(userColumns);

    const [caseColumns] = await pool.query('DESCRIBE cases;');
    console.log('cases structure:');
    console.table(caseColumns);
  } catch (err) {
    console.error('Table creation error:', err);
  }
}


// ─── 3) HEALTH CHECK ENDPOINT ────────────────────────────────────────────────────
app.get('/api/health', async (req, res) => {
  try {
    await pool.query('SELECT 1;');
    res.json({ status: 'OK', message: 'Backend server is running' });
  } catch (err) {
    res.status(500).json({ status: 'DOWN', error: err.message });
  }
});


// ─── 4) SEARCH LEADS ─────────────────────────────────────────────────────────────
app.get('/api/leads', async (req, res) => {
  const search = req.query.q || '';
  console.log('Searching leads for:', search);

  try {
    const searchTerm = `%${search}%`;
    const [results] = await pool.query(
      `
      SELECT *
      FROM LeadDemoData
      WHERE ckt          LIKE ?
         OR cust_name    LIKE ?
         OR contact_name LIKE ?
         OR email_id     LIKE ?
         OR sales_person LIKE ?
         OR address      LIKE ?
      ORDER BY ckt ASC
      LIMIT 50;
      `,
      [searchTerm, searchTerm, searchTerm, searchTerm, searchTerm, searchTerm]
    );

    console.log('Found leads:', results.length);
    res.json(results);
  } catch (err) {
    console.error('Error searching leads:', err);
    res.status(500).json({ error: err.message });
  }
});



/**
 * 5) GET ALL CASES
 *    - If x-user-role === "admin"  → return all cases
 *    - Else (role === "user")      → return only cases WHERE assignedTo = <that user ID>
 *  The JSON response now includes:
 *     • createdByUser   (always)
 *     • assignedToUser  (might be NULL if no assignee)
 *     • companyName     (from LeadDemoData)
 */
app.get('/api/cases', async (req, res) => {
  const userId   = parseInt(req.header('x-user-id'), 10);
  const userRole = req.header('x-user-role');

  if (!userId || !userRole) {
    return res.status(400).json({ error: 'Missing x-user-id or x-user-role header' });
  }

  console.log(`Fetching cases for userId=${userId}, role=${userRole}`);

  try {
    let query, params;

    if (userRole === 'admin') {
      // Admin sees everything
      query = `
        SELECT
          cases.*,
          users_creator.username   AS createdByUser,
          users_assignee.username  AS assignedToUser,
          LeadDemoData.cust_name   AS companyName
        FROM cases
        JOIN users AS users_creator
          ON cases.createdBy = users_creator.id
        LEFT JOIN users AS users_assignee
          ON cases.assignedTo = users_assignee.id
        LEFT JOIN LeadDemoData
          ON cases.leadCkt = LeadDemoData.ckt
        ORDER BY cases.createdAt DESC;
      `;
      params = [];
    } else {
      // Non-admin only sees cases WHERE assignedTo = themselves
      query = `
        SELECT
          cases.*,
          users_creator.username   AS createdByUser,
          users_assignee.username  AS assignedToUser,
          LeadDemoData.cust_name   AS companyName
        FROM cases
        JOIN users AS users_creator
          ON cases.createdBy = users_creator.id
        LEFT JOIN users AS users_assignee
          ON cases.assignedTo = users_assignee.id
        LEFT JOIN LeadDemoData
          ON cases.leadCkt = LeadDemoData.ckt
        WHERE cases.assignedTo = ?
        ORDER BY cases.createdAt DESC;
      `;
      params = [userId];
    }

    const [results] = await pool.query(query, params);
    console.log('Found cases:', results.length);
    res.json(results);
  } catch (err) {
    console.error('Error fetching cases:', err);
    res.status(500).json({ error: err.message });
  }
});



/**
 * 6) CREATE A NEW CASE
 *    - frontend sends these headers:
 *       x-user-id, x-user-role
 *    - request body must include:
 *       • leadCkt       (string)
 *       • ipAddress     (string|null)
 *       • connectivity   (enum)
 *       • assignedDate  (ISO string)
 *       • dueDate       (ISO string)
 *       • caseRemarks   (string|null)
 *       • status        (enum)
 *       • timeSpent     (number)
 *       • device        (string|null)
 *       • assignedTo    (number|null)  ← exactly the ID of the user you want to assign to, or null
 *
 *    We store:
 *       createdBy = x-user-id
 *       assignedTo = provided user ID
 */
app.post('/api/cases', async (req, res) => {
  const userId   = parseInt(req.header('x-user-id'), 10);
  const userRole = req.header('x-user-role');

  if (!userId || !userRole) {
    return res.status(400).json({ error: 'Missing x-user-id or x-user-role header' });
  }

  console.log(`User ${userId} (role=${userRole}) creating new case:`, req.body);

  const {
    leadCkt,
    ipAddress,
    connectivity,
    assignedDate,   // ISO string
    dueDate,        // ISO string
    caseRemarks,
    status,
    timeSpent = 0,
    device,
    assignedTo      // <— ID of user to assign to (or null)
  } = req.body;

  if (!leadCkt || !assignedDate || !dueDate) {
    console.error('Missing required fields:', { leadCkt, assignedDate, dueDate });
    return res.status(400).json({
      error: 'Missing required fields: leadCkt, assignedDate, and dueDate are required'
    });
  }

  let formattedAssignedDate, formattedDueDate;
  try {
    formattedAssignedDate = new Date(assignedDate).toISOString().slice(0, 19).replace('T', ' ');
    formattedDueDate      = new Date(dueDate).toISOString().slice(0, 19).replace('T', ' ');
  } catch (dateError) {
    console.error('Date parsing error:', dateError);
    return res.status(400).json({ error: 'Invalid date format' });
  }

  try {
    // Insert row, including the “assignedTo” column
    const [result] = await pool.query(
      `
      INSERT INTO cases
        ( leadCkt
        , ipAddress
        , connectivity
        , assignedDate
        , dueDate
        , caseRemarks
        , status
        , timeSpent
        , device
        , createdBy
        , assignedTo
        )
      VALUES
        (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `,
      [
        leadCkt,
        ipAddress || null,
        connectivity || 'Unknown',
        formattedAssignedDate,
        formattedDueDate,
        caseRemarks || null,
        status || 'Pending',
        parseInt(timeSpent, 10) || 0,
        device || null,
        userId,
        assignedTo || null
      ]
    );

    console.log('Case created with ID:', result.insertId);

    // Immediately SELECT that newly inserted row (so we can return createdByUser, assignedToUser, companyName)
    const [rows] = await pool.query(
      `
      SELECT
        cases.*,
        users_creator.username   AS createdByUser,
        users_assignee.username  AS assignedToUser,
        LeadDemoData.cust_name   AS companyName
      FROM cases
      JOIN users AS users_creator
        ON cases.createdBy = users_creator.id
      LEFT JOIN users AS users_assignee
        ON cases.assignedTo = users_assignee.id
      LEFT JOIN LeadDemoData
        ON cases.leadCkt = LeadDemoData.ckt
      WHERE cases.id = ?
      `,
      [result.insertId]
    );
    return res.status(201).json(rows[0]);
  } catch (err) {
    console.error('Database error while creating case:', err);
    return res.status(500).json({
      error: 'Database operation failed while creating case',
      details: err.sqlMessage
    });
  }
});



/**
 * 7) GET A SINGLE CASE’S FULL DETAILS
 *    - Joins in both creator and assignee usernames
 */
app.get('/api/cases/:id/details', async (req, res) => {
  const caseId = parseInt(req.params.id, 10);
  if (isNaN(caseId)) {
    return res.status(400).json({ error: 'Invalid case ID' });
  }

  try {
    const [rows] = await pool.query(
      `
      SELECT
        cases.*,
        users_creator.username   AS createdByUser,
        users_assignee.username  AS assignedToUser,
        LeadDemoData.cust_name   AS companyName
      FROM cases
      JOIN users AS users_creator
        ON cases.createdBy = users_creator.id
      LEFT JOIN users AS users_assignee
        ON cases.assignedTo = users_assignee.id
      LEFT JOIN LeadDemoData
        ON cases.leadCkt = LeadDemoData.ckt
      WHERE cases.id = ?
      LIMIT 1;
      `,
      [caseId]
    );

    if (rows.length === 0) {
      return res.status(404).json({ error: 'Case not found' });
    }
    return res.json(rows[0]);
  } catch (err) {
    console.error('Error fetching case details:', err);
    return res.status(500).json({ error: 'Server error' });
  }
});



/**
 * 8) UPDATE A CASE
 *    - We now allow updating “assignedTo” in addition to status/remarks/etc.
 *    - After UPDATE, return the full row (including joined usernames).
 */
app.put('/api/cases/:id', async (req, res) => {
  const caseId = parseInt(req.params.id, 10);
  const { status, caseRemarks, timeSpent, device, assignedTo } = req.body;

  if (isNaN(caseId)) {
    return res.status(400).json({ error: 'Invalid case ID' });
  }
  if (
    status === undefined &&
    caseRemarks === undefined &&
    timeSpent === undefined &&
    device === undefined &&
    assignedTo === undefined
  ) {
    return res.status(400).json({
      error: 'At least one of { status, caseRemarks, timeSpent, device, assignedTo } must be provided.'
    });
  }

  const fieldsToUpdate = [];
  const values = [];

  if (status !== undefined) {
    fieldsToUpdate.push('status = ?');
    values.push(status);
  }
  if (caseRemarks !== undefined) {
    fieldsToUpdate.push('caseRemarks = ?');
    values.push(caseRemarks || null);
  }
  if (timeSpent !== undefined) {
    fieldsToUpdate.push('timeSpent = ?');
    values.push(isNaN(parseInt(timeSpent, 10)) ? 0 : parseInt(timeSpent, 10));
  }
  if (device !== undefined) {
    fieldsToUpdate.push('device = ?');
    values.push(device || null);
  }
  if (assignedTo !== undefined) {
    fieldsToUpdate.push('assignedTo = ?');
    values.push(assignedTo || null);
  }

  // Auto‐update lastUpdated
  fieldsToUpdate.push('lastUpdated = CURRENT_TIMESTAMP');

  const sql = `
    UPDATE cases
    SET ${fieldsToUpdate.join(', ')}
    WHERE id = ?
  `;
  values.push(caseId);

  try {
    const [result] = await pool.query(sql, values);
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Case not found' });
    }
    // Return updated row with joins
    const [rows] = await pool.query(
      `
      SELECT
        cases.*,
        users_creator.username   AS createdByUser,
        users_assignee.username  AS assignedToUser,
        LeadDemoData.cust_name   AS companyName
      FROM cases
      JOIN users AS users_creator
        ON cases.createdBy = users_creator.id
      LEFT JOIN users AS users_assignee
        ON cases.assignedTo = users_assignee.id
      LEFT JOIN LeadDemoData
        ON cases.leadCkt = LeadDemoData.ckt
      WHERE cases.id = ?
      `,
      [caseId]
    );
    return res.status(200).json(rows[0]);
  } catch (err) {
    console.error('Error updating case:', err);
    return res.status(500).json({ error: 'Database error while updating case.' });
  }
});



/**
 * 9) DELETE A CASE
 */
app.delete('/api/cases/:id', async (req, res) => {
  const caseId = parseInt(req.params.id, 10);
  if (isNaN(caseId)) {
    return res.status(400).json({ error: 'Invalid case ID' });
  }

  try {
    const [result] = await pool.query('DELETE FROM cases WHERE id = ?', [caseId]);
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'Case not found or already deleted.' });
    }
    return res.status(204).send();
  } catch (err) {
    console.error('Error deleting case:', err);
    return res.status(500).json({ error: 'Database error while deleting case.' });
  }
});



/**
 * 10) AUTH: SIMPLE LOGIN
 */
app.post('/api/auth/login', async (req, res) => {
  const { username, password } = req.body;
  if (!username || !password) {
    return res.status(400).json({ error: 'Username and password are required' });
  }

  try {
    const [rows] = await pool.query(
      'SELECT id, username, role FROM users WHERE username = ? AND password_hash = ?;',
      [username, password]
    );
    if (rows.length === 0) {
      return res.status(401).json({ error: 'Invalid username or password' });
    }
    const user = rows[0];
    return res.json({
      message: 'Login successful',
      user: {
        id: user.id,
        username: user.username,
        role: user.role
      }
    });
  } catch (err) {
    console.error('Login error:', err);
    return res.status(500).json({ error: 'Login failed' });
  }
});



/**
 * 11) GET ALL USERS
 */
app.get('/api/users', async (req, res) => {
  try {
    const [rows] = await pool.query(
      'SELECT id, username, role, createdAt FROM users ORDER BY createdAt DESC;'
    );
    res.json(rows);
  } catch (err) {
    console.error('Get users error:', err);
    res.status(500).json({ error: 'Failed to fetch users' });
  }
});



/**
 * 12) CREATE A NEW USER
 */
app.post('/api/users', async (req, res) => {
  const { username, password, role = 'user' } = req.body;
  if (!username || !password) {
    return res.status(400).json({ error: 'Username and password are required' });
  }
  if (!['admin', 'user'].includes(role)) {
    return res.status(400).json({ error: 'Role must be either "admin" or "user"' });
  }

  try {
    // Check uniqueness
    const [existing] = await pool.query('SELECT id FROM users WHERE username = ?;', [username]);
    if (existing.length > 0) {
      return res.status(409).json({ error: 'Username already exists' });
    }

    const [result] = await pool.query(
      'INSERT INTO users (username, password_hash, role) VALUES (?, ?, ?);',
      [username, password, role]
    );
    // Return the newly created user (excluding password_hash)
    const [rows] = await pool.query(
      'SELECT id, username, role, createdAt FROM users WHERE id = ?;',
      [result.insertId]
    );
    return res.status(201).json(rows[0]);
  } catch (err) {
    console.error('Create user error:', err);
    return res.status(500).json({ error: 'Failed to create user' });
  }
});



/**
 * 13) UPDATE AN EXISTING USER
 */
app.put('/api/users/:id', async (req, res) => {
  const userId = parseInt(req.params.id, 10);
  const { username, password, role } = req.body;

  if (isNaN(userId)) {
    return res.status(400).json({ error: 'Invalid user ID' });
  }
  if (username === undefined && password === undefined && role === undefined) {
    return res.status(400).json({
      error: 'At least one of { username, password, role } must be provided.'
    });
  }

  const fields = [];
  const values = [];

  if (username !== undefined) {
    fields.push('username = ?');
    values.push(username);
  }
  if (password !== undefined) {
    fields.push('password_hash = ?');
    values.push(password);
  }
  if (role !== undefined) {
    if (!['admin', 'user'].includes(role)) {
      return res.status(400).json({ error: 'Role must be "admin" or "user"' });
    }
    fields.push('role = ?');
    values.push(role);
  }

  const sql = `UPDATE users SET ${fields.join(', ')} WHERE id = ?;`;
  values.push(userId);

  try {
    const [result] = await pool.query(sql, values);
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'User not found' });
    }
    // Return updated user
    const [rows] = await pool.query(
      'SELECT id, username, role, createdAt FROM users WHERE id = ?;',
      [userId]
    );
    return res.json(rows[0]);
  } catch (err) {
    console.error('Update user error:', err);
    if (err.code === 'ER_DUP_ENTRY') {
      return res.status(409).json({ error: 'Username already exists' });
    }
    return res.status(500).json({ error: 'Failed to update user' });
  }
});



/**
 * 14) DELETE A USER
 */
app.delete('/api/users/:id', async (req, res) => {
  const userId = parseInt(req.params.id, 10);
  if (isNaN(userId)) {
    return res.status(400).json({ error: 'Invalid user ID' });
  }
  try {
    const [result] = await pool.query('DELETE FROM users WHERE id = ?;', [userId]);
    if (result.affectedRows === 0) {
      return res.status(404).json({ error: 'User not found' });
    }
    return res.status(204).send();
  } catch (err) {
    console.error('Delete user error:', err);
    return res.status(500).json({ error: 'Failed to delete user' });
  }
});



/**
 * 15) START THE SERVER
 */
const PORT = process.env.PORT || 3001;
app.listen(PORT, '0.0.0.0', () => {
  console.log(`Backend server running on port ${PORT} (all interfaces)`);
  console.log('Available endpoints:');
  console.log('- GET    /api/health');
  console.log('- GET    /api/leads?q=<search_string>');
  console.log('- GET    /api/cases');
  console.log('- GET    /api/cases/:id/details');
  console.log('- POST   /api/cases');
  console.log('- PUT    /api/cases/:id');
  console.log('- DELETE /api/cases/:id');
  console.log('- POST   /api/auth/login');
  console.log('- GET    /api/users');
  console.log('- POST   /api/users');
  console.log('- PUT    /api/users/:id');
  console.log('- DELETE /api/users/:id');
});

