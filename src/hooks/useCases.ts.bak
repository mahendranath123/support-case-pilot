// src/hooks/useCases.ts

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import {
  getCases,
  createCase,
  updateCase,
  deleteCase,
  ApiCase,
} from '@/services/api';
import { Case } from '@/types';
import { toast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';

// ─── Convert ApiCase to Frontend Case ───────────────────────────────────────────
const convertApiCaseToCase = (apiCase: ApiCase): Case => ({
  id: apiCase.id.toString(),
  leadCkt: apiCase.leadCkt,
  ipAddress: apiCase.ipAddress,
  connectivity: apiCase.connectivity as 'Stable' | 'Unstable' | 'Unknown',
  assignedDate: new Date(apiCase.assignedDate),
  dueDate: new Date(apiCase.dueDate),
  caseRemarks: apiCase.caseRemarks,
  status: apiCase.status as 'Pending' | 'Overdue' | 'Completed' | 'OnHold',
  createdAt: new Date(apiCase.createdAt),
  timeSpent: apiCase.timeSpent,
  lastUpdated: new Date(apiCase.lastUpdated),
  createdBy: apiCase.createdBy,
  createdByUser: apiCase.createdByUser,
  device: apiCase.device || '',
});

// ─── Fetch All Cases Hook ───────────────────────────────────────────────────────
export const useCases = () => {
  const { user } = useAuth();
  return useQuery({
    queryKey: ['cases', user?.id, user?.role],
    queryFn: async () => {
      const apiCases = await getCases(user);
      return apiCases.map(convertApiCaseToCase);
    },
    enabled: !!user,
  });
};

// ─── Create Case Hook ────────────────────────────────────────────────────────────
export const useCreateCase = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();

  return useMutation({
    mutationFn: (caseData: {
      leadCkt: string;
      ipAddress: string;
      connectivity: 'Stable' | 'Unstable' | 'Unknown';
      assignedDate: string;
      dueDate: string;
      caseRemarks: string;
      status: 'Pending' | 'Overdue' | 'Completed' | 'OnHold';
      timeSpent: number;
      device?: string;
    }) => createCase(caseData, user),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['cases', user?.id, user?.role] });
      toast({
        title: 'Success',
        description: 'Case created successfully.',
      });
    },
    onError: (err: any) => {
      toast({
        title: 'Error',
        description: err?.message || 'Failed to create case.',
        variant: 'destructive',
      });
    },
  });
};

// ─── Update Case Hook ────────────────────────────────────────────────────────────
export const useUpdateCase = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();

  return useMutation({
    mutationFn: (args: {
      id: number;
      updates: Partial<Pick<ApiCase, 'status' | 'caseRemarks' | 'timeSpent' | 'device'>>;
    }) => updateCase(args.id, args.updates, user),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['cases', user?.id, user?.role] });
      toast({
        title: 'Success',
        description: 'Case updated successfully.',
      });
    },
    onError: (err: any) => {
      toast({
        title: 'Error',
        description: err?.message || 'Failed to update case.',
        variant: 'destructive',
      });
    },
  });
};

// ─── Delete Case Hook ────────────────────────────────────────────────────────────
export const useDeleteCase = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();

  return useMutation({
    mutationFn: (id: number) => deleteCase(id, user),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['cases', user?.id, user?.role] });
      toast({
        title: 'Success',
        description: 'Case deleted successfully.',
      });
    },
    onError: (err: any) => {
      toast({
        title: 'Error',
        description: err?.message || 'Failed to delete case.',
        variant: 'destructive',
      });
    },
  });
};

